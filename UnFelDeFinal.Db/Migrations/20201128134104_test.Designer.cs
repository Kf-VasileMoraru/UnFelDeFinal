// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using UnFelDeFinal.Db;

namespace UnFelDeFinal.Db.Migrations
{
    [DbContext(typeof(EServicesDbContext))]
    [Migration("20201128134104_test")]
    partial class test
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("UnFelDeFinal.Domain.AddressCityHall", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HouseNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalColde")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AddressCityHalls");
                });

            modelBuilder.Entity("UnFelDeFinal.Domain.AddressPerson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ElectronicServicePaymentInfoId")
                        .HasColumnType("int");

                    b.Property<string>("HouseNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalColde")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ElectronicServicePaymentInfoId")
                        .IsUnique()
                        .HasFilter("[ElectronicServicePaymentInfoId] IS NOT NULL");

                    b.ToTable("AddressPeople");
                });

            modelBuilder.Entity("UnFelDeFinal.Domain.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("UnFelDeFinal.Domain.BillingDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("CityHallId")
                        .HasColumnType("int");

                    b.Property<int?>("ElectronicServiceId")
                        .HasColumnType("int");

                    b.Property<int?>("ElectronicServicePaymentInfoId")
                        .HasColumnType("int");

                    b.Property<int>("IbanId")
                        .HasColumnType("int");

                    b.Property<bool>("IsPayed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("IsPayedDataTime")
                        .HasColumnType("SMALLDATETIME");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("CityHallId");

                    b.HasIndex("ElectronicServiceId");

                    b.HasIndex("ElectronicServicePaymentInfoId");

                    b.HasIndex("IbanId");

                    b.ToTable("BillingDetails");
                });

            modelBuilder.Entity("UnFelDeFinal.Domain.CityHall", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AddressCityHallId")
                        .HasColumnType("int");

                    b.Property<int?>("AddressCityHallId1")
                        .HasColumnType("int");

                    b.Property<int?>("AddressCityHallId2")
                        .HasColumnType("int");

                    b.Property<string>("BanckAccount")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("AddressCityHallId");

                    b.ToTable("CityHalls");

                    b.HasCheckConstraint("CK_CityHall_Name", "Name Like '%___%'");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BanckAccount = "BanckAccount1",
                            Name = "Ciorescu"
                        },
                        new
                        {
                            Id = 2,
                            BanckAccount = "BanckAccount2",
                            Name = "Bacioi"
                        },
                        new
                        {
                            Id = 3,
                            BanckAccount = "BanckAccount3",
                            Name = "Bubuieci"
                        },
                        new
                        {
                            Id = 4,
                            BanckAccount = "BanckAccount4",
                            Name = "Budesti"
                        });
                });

            modelBuilder.Entity("UnFelDeFinal.Domain.ContactCityHall", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CityHallId")
                        .HasColumnType("int");

                    b.Property<string>("ContactData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ContactTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("ContactTypeId0")
                        .HasColumnType("int");

                    b.Property<int?>("ContactTypeId1")
                        .HasColumnType("int");

                    b.Property<int?>("ContactTypeId2")
                        .HasColumnType("int");

                    b.Property<int?>("ContactTypeId3")
                        .HasColumnType("int");

                    b.Property<int?>("ContactTypeId4")
                        .HasColumnType("int");

                    b.Property<int?>("ContactTypeId5")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CityHallId");

                    b.HasIndex("ContactTypeId");

                    b.ToTable("ContactCityHalls");
                });

            modelBuilder.Entity("UnFelDeFinal.Domain.ContactPerson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContactData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ContactTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("ContactTypeId0")
                        .HasColumnType("int");

                    b.Property<int?>("ContactTypeId1")
                        .HasColumnType("int");

                    b.Property<int?>("ElectronicServicePaymentInfoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ContactTypeId");

                    b.HasIndex("ElectronicServicePaymentInfoId")
                        .IsUnique()
                        .HasFilter("[ElectronicServicePaymentInfoId] IS NOT NULL");

                    b.ToTable("ContactPeople");
                });

            modelBuilder.Entity("UnFelDeFinal.Domain.ContactType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ContactTypes");
                });

            modelBuilder.Entity("UnFelDeFinal.Domain.ElectronicService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("SMALLMONEY");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasMaxLength(450);

                    b.Property<string>("TreasureAccount")
                        .IsRequired()
                        .HasColumnType("varchar(15)");

                    b.HasKey("Id");

                    b.HasAlternateKey("TreasureAccount");

                    b.ToTable("ElectronicService");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amount = 20.52m,
                            Name = "test 1 service ",
                            TreasureAccount = "Treasure1"
                        },
                        new
                        {
                            Id = 2,
                            Amount = 12.22m,
                            Name = "test 2 service ",
                            TreasureAccount = "Treasure2"
                        },
                        new
                        {
                            Id = 3,
                            Amount = 22.12m,
                            Name = "test 3 service ",
                            TreasureAccount = "Treasure3"
                        },
                        new
                        {
                            Id = 4,
                            Amount = 2.52m,
                            Name = "test 4 service ",
                            TreasureAccount = "Treasure4"
                        },
                        new
                        {
                            Id = 5,
                            Amount = 44.42m,
                            Name = "test 5 service ",
                            TreasureAccount = "Treasure5"
                        });
                });

            modelBuilder.Entity("UnFelDeFinal.Domain.ElectronicServicePaymentInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("SMALLMONEY");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DataTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Idnx")
                        .IsRequired()
                        .HasColumnType("char(13)");

                    b.Property<string>("PayerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("PayerType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ElectronicServicePaymentInfo");

                    b.HasCheckConstraint("CK_PayerInfo_Amount", "Amount Like '%[0-9]%'");

                    b.HasCheckConstraint("CK_PayerInfo_Idnx", "Idnx Like '[012]____________'");

                    b.HasCheckConstraint("CK_PayerInfo_PayerName", "PayerName Like '%_____%'");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amount = 20.2m,
                            DataTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Idnx = "0123456789012",
                            PayerName = "payer name 1",
                            PayerType = 0
                        },
                        new
                        {
                            Id = 2,
                            Amount = 10.2m,
                            DataTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Idnx = "0123456789013",
                            PayerName = "payer name 2",
                            PayerType = 1
                        });
                });

            modelBuilder.Entity("UnFelDeFinal.Domain.Iban", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CityHallId")
                        .HasColumnType("int");

                    b.Property<int?>("ElectronicServiceId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("char(24)");

                    b.HasKey("Id");

                    b.HasIndex("CityHallId");

                    b.HasIndex("ElectronicServiceId");

                    b.ToTable("Ibans");

                    b.HasCheckConstraint("CQ_Iban_Name", "Name Like 'MD______________________'");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CityHallId = 1,
                            ElectronicServiceId = 1,
                            Name = "MD_____________________1"
                        },
                        new
                        {
                            Id = 2,
                            CityHallId = 2,
                            ElectronicServiceId = 1,
                            Name = "MD_____________________2"
                        },
                        new
                        {
                            Id = 3,
                            CityHallId = 3,
                            ElectronicServiceId = 1,
                            Name = "MD_____________________3"
                        },
                        new
                        {
                            Id = 4,
                            CityHallId = 4,
                            ElectronicServiceId = 1,
                            Name = "MD_____________________4"
                        },
                        new
                        {
                            Id = 5,
                            CityHallId = 1,
                            ElectronicServiceId = 2,
                            Name = "MD_____________________5"
                        },
                        new
                        {
                            Id = 6,
                            CityHallId = 2,
                            ElectronicServiceId = 2,
                            Name = "MD_____________________6"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("UnFelDeFinal.Domain.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("UnFelDeFinal.Domain.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UnFelDeFinal.Domain.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("UnFelDeFinal.Domain.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UnFelDeFinal.Domain.AddressPerson", b =>
                {
                    b.HasOne("UnFelDeFinal.Domain.ElectronicServicePaymentInfo", "ElectronicServicePaymentInfo")
                        .WithOne("AddressPerson")
                        .HasForeignKey("UnFelDeFinal.Domain.AddressPerson", "ElectronicServicePaymentInfoId");
                });

            modelBuilder.Entity("UnFelDeFinal.Domain.BillingDetails", b =>
                {
                    b.HasOne("UnFelDeFinal.Domain.ApplicationUser", "ApplicationUser")
                        .WithMany("BillingDetails")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("UnFelDeFinal.Domain.CityHall", "CityHall")
                        .WithMany("BillingDetails")
                        .HasForeignKey("CityHallId");

                    b.HasOne("UnFelDeFinal.Domain.ElectronicService", "ElectronicService")
                        .WithMany("BillingDetails")
                        .HasForeignKey("ElectronicServiceId");

                    b.HasOne("UnFelDeFinal.Domain.ElectronicServicePaymentInfo", "ElectronicServicePaymentInfo")
                        .WithMany("BillingDetails")
                        .HasForeignKey("ElectronicServicePaymentInfoId");

                    b.HasOne("UnFelDeFinal.Domain.Iban", "Iban")
                        .WithMany("BillingDetails")
                        .HasForeignKey("IbanId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("UnFelDeFinal.Domain.CityHall", b =>
                {
                    b.HasOne("UnFelDeFinal.Domain.AddressCityHall", "AddressCityHall")
                        .WithMany("CityHall")
                        .HasForeignKey("AddressCityHallId");
                });

            modelBuilder.Entity("UnFelDeFinal.Domain.ContactCityHall", b =>
                {
                    b.HasOne("UnFelDeFinal.Domain.CityHall", "CityHall")
                        .WithMany("ContactCityHall")
                        .HasForeignKey("CityHallId");

                    b.HasOne("UnFelDeFinal.Domain.ContactType", "ContactType")
                        .WithMany("ContactCityHall")
                        .HasForeignKey("ContactTypeId");
                });

            modelBuilder.Entity("UnFelDeFinal.Domain.ContactPerson", b =>
                {
                    b.HasOne("UnFelDeFinal.Domain.ContactType", "ContactType")
                        .WithMany("ContactPerson")
                        .HasForeignKey("ContactTypeId");

                    b.HasOne("UnFelDeFinal.Domain.ElectronicServicePaymentInfo", "ElectronicServicePaymentInfo")
                        .WithOne("ContactPerson")
                        .HasForeignKey("UnFelDeFinal.Domain.ContactPerson", "ElectronicServicePaymentInfoId");
                });

            modelBuilder.Entity("UnFelDeFinal.Domain.Iban", b =>
                {
                    b.HasOne("UnFelDeFinal.Domain.CityHall", "CityHall")
                        .WithMany("Iban")
                        .HasForeignKey("CityHallId");

                    b.HasOne("UnFelDeFinal.Domain.ElectronicService", "ElectronicService")
                        .WithMany("Iban")
                        .HasForeignKey("ElectronicServiceId");
                });
#pragma warning restore 612, 618
        }
    }
}
